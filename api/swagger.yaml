# A Swagger 2.0 (a.k.a. OpenAPI) definition of the Bridge API.

swagger: "2.0"
schemes:
  - "http"
  - "https"
produces:
  - "application/json"
  - "text/plain"
consumes:
  - "application/json"
  - "text/plain"
basePath: "/v1"
info:
  title: "Guruvest Bridge API"
  version: "1"
  x-logo:
    url: "https://www.guruvest.io/wp-content/uploads/2017/08/cropped-logo-transparent.png"
  description: |
    The Guruvest Bridge API is a REST API served the Guruvest platform. It is the API that third party client uses to communicate signals to the Guruvest platform.

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:

    ```
    {
      "message": "page not found"
    }
    ```

    # Versioning

    The API is usually changed in each release, so API calls are versioned to
    ensure that clients don't break. To lock to a specific version of the API,
    you prefix the URL with its version, for example, call `/v0/info` to use
    the v0 version of the `/info` endpoint. If the API version specified in
    the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
    is returned.

    If you omit the version-prefix, the current version of the API (v1) is used.
    For example, calling `/info` is the same as calling `/v1/info`. Using the
    API without a version-prefix is deprecated and will be removed in a future release.

    The API uses an open schema model, which means server may add extra properties
    to responses. Likewise, the server will ignore any extra query parameters and
    request body properties. When you write clients, you need to ignore additional
    properties in responses to ensure they do not break when talking to newer
    daemons.

 
    ```

# The tags on paths define the menu sections in the ReDoc documentation, so
# the usage of tags must make sense for that:
# - They should be singular, not plural.
# - There should not be too many tags, or the menu becomes unwieldy. For
#   example, it is preferable to add a path to the "System" tag instead of
#   creating a tag with a single path in it.
# - The order of tags in this list defines the order in the menu.

tags:
  # Primary objects
  - name: "System Info"
    description: |
      Gather information on the Bridge system.
  - name: "Account Data"
    description: |
      Gather information about your Guruvest account.
  - name: "Market Access"
    description: |
      Access to execution methods and market data.


definitions:

  SystemInfo:
    description: "Information of the current system"
    type: object
    properties:
      message:
        description: "This is the info message."
        type: "string"
        x-nullable: false
    xml:
      name: SystemInfo

  LinkedAccount:
    description: "Information about a linked account"
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: "The unique Guruvest internal identifier for the linked account"
      name:
        type: string
        description: "The name of the account"
        example: "My Bittex account"
      brokerage_name:
        type: string
        description: "The name of the Venue (broker or exchange)"
        example: "The name of the associated broker or exchange"
      active:
        type: boolean
        description: "Identify if the account is active or not"
      trade:
        type: boolean
        description: "Identify if the account is able to perform trades or not"
    xml:
      name: LinkedAccount
    
  ErrorResponse:
    description: "Represents an error."
    type: object
    required: ["message"]
    properties:
      message:
        description: "The error message."
        type: "string"
        x-nullable: false
    example:
      message: "Something went wrong."
      
  Order:
    properties:
      id:
        type: string
        example: "d0c5340b-6d6c-49d9-b567-48c4bfca13d2"
      symbol:
        type: string
        description: Symbol ID
        example: "A valid symbol ID"
      side:
        type: string
        example: "buy or sell"
      type:
        type: string
        description: Order Type
        example: "limit, market, or stop"
      quantity:
        type: integer
        format: int32
      rate:
        type: integer
        format: int32
    xml:
      name: Order
      
  Exchange:
    properties:
      id:
        type: integer
        format: int32
        description: "Guruvest internal exchange/broker ID"
      name:
        type: string
        description: "The name of the exchange/broker"
      code:
        type: string
        description: "The code of the exchange/broker"
      fee:
        type: number
        format: float
        description: "The fee applied to each order"
      url:
        type: string
        description: "The URL of the exchange/broker"
      trade:
        type: boolean
        description: "Identify if the exchange has trading capabilities enabled or not"
    xml:
      name: Exchange
      
  Tick:
    properties:
      exchange_code:
        type: string
        description: "The code of the exchange/broker"
      symbol:
        type: string
        description: "The symbol of an asset"
        example: "BTC-USD"
      last:
        type: number
        format: float
      high:
        type: number
        format: float
      low:
        type: number
        format: float
      current_volume:
        type: number
        format: float
      ask:
        type: number
        format: float
      bid:
        type: number
        format: float
      timestamp":
        type: string
        format: date-time
    xml:
      name: Tick
  
  Position:
    properties:
      symbol:
        type: string
        description: Symbol ID
        example: "A valid symbol ID"
      quantity:
        type: integer
        format: int32
    xml:
      name: Position
      
securityDefinitions:
  bridge_auth:
    type: oauth2
    authorizationUrl: "http://bridge.guruvest.io/api/oauth"
    flow: implicit
    scopes:
      "write:orders": send orders to your account
      "read:orders": read your orders
  api_key:
    type: apiKey
    name: api_key
    in: header

paths:
  /info:
    get:
      tags: ["System Info"]
      summary: "Get system information"
      operationId: "SystemInfo"
      produces:
        - "application/json"
      responses:
        "200":
          description: "No error"
          schema:
            $ref: "#/definitions/SystemInfo"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  "/accounts":
    get:
      tags: ["Account Data"]
      summary: Return the list of all the linked accounts
      description: ""
      operationId: getLinkedAccounts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/LinkedAccount"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/accounts/{account_id}/orders":
    get:
      tags: ["Account Data"]
      summary: Return the list of orders for the given account
      description: ""
      operationId: getOrdersByAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: the linked account ID
          required: true
          type: integer
          format: int32
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
  
  "/accounts/{account_id}/portfolios":
    get:
      tags: ["Account Data"]
      summary: Return the list of portfolios for the given account
      description: ""
      operationId: getPortfoliosByAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: the linked account ID
          required: true
          type: integer
          format: int32
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Position"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/orders":
    get:
      tags: ["Account Data"]
      summary: Return the list of orders across all the linked accounts
      description: ""
      operationId: getOrders
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
  
  "/portfolios":
    get:
      tags: ["Account Data"]
      summary: Return the list of portfolios across all the linked accounts
      description: ""
      operationId: getPortfolios
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Position"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
            
  "/market/exchanges":
    get:
      tags: ["Market Access"]
      summary: Return the list of exchanges
      description: ""
      operationId: getExchanges
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        "200":
          description: successful operation
          schema:
              type: array
              items:
                $ref: "#/definitions/Exchange"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
  
  "/market/tickers/{symbol}":
    get:
      tags: ["Market Access"]
      summary: "Returns last, high (24h), low (24h), ask, bid for specified symbol"
      description: ""
      operationId: getTicker
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: symbol
          in: path
          description: The Symbol that needs to be fetched
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Tick"
        "400":
          description: Invalid Symbol supplied
        "404":
          description: Symbol not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/market/orders":
    post:
      tags: ["Market Access"]
      summary: Add a new order to the order book
      description: ""
      operationId: addOrder
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - name: order
          in: body
          description: Order object that needs to be added to the order book
          required: false
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: Order inserted successfully
        "405":
          description: Invalid input
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
    
  
  "/market/orders/{orderId}":
    get:
      tags: ["Market Access"]
      summary: Find order by ID
      description: "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions"
      operationId: getOrderById
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of Order that needs to be fetched
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags: ["Market Access"]
      summary: Update an existing Order
      description: ""
      operationId: updateOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: order
          in: body
          description: Order object that needs to be added to the order book
          required: false
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: Order updated successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        "405":
          description: Validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
    delete:
      tags: ["Market Access"]
      summary: Cancel the order by ID
      operationId: cancelOrder
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be cancelled
          required: true
          type: string
      responses:
        "204":
          description: Order deleted successfully
        "400":
          description: Invalid OrderID supplied
        "404":
          description: Order not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'