# A Swagger 2.0 (a.k.a. OpenAPI) definition of the Bridge API.

swagger: "2.0"
schemes:
  - "http"
  #- "https"
produces:
  - "application/json"
consumes:
  - "application/json"
basePath: "/v1"
info:
  title: "Guruvest Bridge API"
  version: "1"
  x-logo:
    url: "https://www.guruvest.io/wp-content/uploads/2017/08/cropped-logo-transparent.png"
  description: |
    The Guruvest Bridge API is a REST API served the Guruvest platform. It is the API that third party client uses to communicate signals to the Guruvest platform.

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:

    ```
    {
      "message": "page not found"
    }
    ```

    # Versioning

    The API is usually changed in each release, so API calls are versioned to
    ensure that clients don't break. To lock to a specific version of the API,
    you prefix the URL with its version, for example, call `/v0/info` to use
    the v0 version of the `/info` endpoint. If the API version specified in
    the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
    is returned.

    If you omit the version-prefix, the current version of the API (v1) is used.
    For example, calling `/info` is the same as calling `/v1/info`. Using the
    API without a version-prefix is deprecated and will be removed in a future release.

    The API uses an open schema model, which means server may add extra properties
    to responses. Likewise, the server will ignore any extra query parameters and
    request body properties. When you write clients, you need to ignore additional
    properties in responses to ensure they do not break when talking to newer
    daemons.

 
    ```

# The tags on paths define the menu sections in the ReDoc documentation, so
# the usage of tags must make sense for that:
# - They should be singular, not plural.
# - There should not be too many tags, or the menu becomes unwieldy. For
#   example, it is preferable to add a path to the "System" tag instead of
#   creating a tag with a single path in it.
# - The order of tags in this list defines the order in the menu.

tags:
  # Primary objects
  - name: "System Info"
    description: |
      Gather information on the Bridge system.
  - name: "Account Data"
    description: |
      Gather information about your Guruvest account.
  - name: "Market Access"
    description: |
      Access to execution methods and market data.

parameters:
  accountIdParam:
    in: query 
    #path
    name: account_id
    description: The linked account identifier
    type: integer
    format: int32
    #required: true
  exchangeIdParam:
    in: query
    name: exchange_id
    description: The trading venue identifier. If not specified, user's default is selected
    type:  integer
    format: int32
    required: false
  orderIdParam:
    in: path
    name: order_id
    description: The order identifier
    type: string
    required: true
  symbolParam:
    in: query
    name: symbol
    description: The symbol identifier
    type: string
    required: true
  statusParam:
    in: query
    name: status
    description: the status of the orders to be retrieved - open, pending, closed
    type: string
    enum: [open, pending, closed]
  limitParam:
    in: query
    name: limit
    description: maximum number of results to return
    type: integer
    format: int32
    required: false

definitions:

  SystemInfo:
    description: "Information of the current system"
    type: object
    properties:
      message:
        description: "This is the info message."
        type: "string"
        x-nullable: false
    xml:
      name: SystemInfo

  LinkedAccount:
    description: "Information about a linked account"
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: "The unique Guruvest internal identifier for the linked account"
      name:
        type: string
        description: "The name of the account"
        example: "My Bittex account"
      brokerage_id:
        type: integer
        format: int32
        description: "Guruvest internal exchange/broker identifier"
      brokerage_name:
        type: string
        description: "The name of the Venue (broker or exchange)"
        example: "The name of the associated broker or exchange"
      active:
        type: boolean
        description: "Identify if the account is active or not"
      tradable:
        type: boolean
        description: "Identify if the account is able to perform trades or not"
      is_default:
        type: boolean
        description: Identify if the account should be used as the default one
    xml:
      name: LinkedAccount
    
  ErrorResponse:
    description: "Represents an error."
    type: object
    required: ["message"]
    properties:
      message:
        description: "The error message."
        type: "string"
        x-nullable: false
    example:
      message: "Something went wrong."
      
  Order:
    properties:
      id:
        type: string
        example: "d0c5340b-6d6c-49d9-b567-48c4bfca13d2"
      symbol:
        type: string
        description: Symbol ID
        example: "A valid symbol ID"
      side:
        type: string
        enum: [buy, sell]
        example: "buy or sell"
      type:
        type: string
        enum: [limit, market, stop]
        description: Order Type
        example: "limit, market, or stop"
      quantity:
        type: number
        format: float
      filled_quantity:
        type: number
        format: float
      rate:
        type: number
        format: float
      opened_at:
        type: string
        format: date-time
        description: "The full date time format ISO 8601 when the order was created"
      closed_at:
        type: string
        format: date-time
        description: "The full date time format ISO 8601 when the order was closed"
      status:
        type: string
        enum: [open, pending, closed]
      time_in_force:
        type: string
        enum: [GTC, GTT, IOC, FOK]
        description: "[optional] GTC, GTT, IOC, or FOK (default is GTC)"
    xml:
      name: Order

  Trade:
    description: ""
    properties:
      id:
        type: string
        example: "d0c5340b-6d6c-49d9-b567-48c4bfca13d2"
      order_id:
        type: string
        description: The link to the order id
        example: "d0c5340b-6d6c-49d9-b567-48c4bfca13d2"
      symbol:
        type: string
        description: Symbol ID
        example: "A valid symbol ID"
      side:
        type: string
        enum: [buy, sell]
        example: "buy or sell"
      fee:
        type: number
        format: float
        description: "The fee applied to the trade"
      filled_at:
        type: string
        format: date-time
        description: "The full date time format ISO 8601 when the trade was filled"
      quantity:
        type: number
        format: float
      filled_quantity:
        type: number
        format: float
      rate:
        type: number
        format: float
      filled_rate:
        type: number
        format: float
      notional_traded:
        type: number
        format: float
      filled_type:
        type: string
        enum: [fill, partial]
        description: Whether the trade was partially filled or not

  Exchange:
    description: "The trading venue, it could be either a Broker, an exchange or a financial institution with trading capabilities"
    properties:
      id:
        type: integer
        format: int32
        description: "Guruvest internal exchange/broker identifier"
      name:
        type: string
        description: "The name of the exchange/broker"
      code:
        type: string
        description: "The code of the exchange/broker"
# fee structures are way more complicated then a floating point number. I do not know how accurate we want to go with that, but surely more than this.
      fee:
        type: number
        format: float
        description: "The fee applied to each order"
      url:
        type: string
        description: "The URL of the exchange/broker"
      tradable:
        type: boolean
        description: "Identify if the exchange has trading capabilities enabled or not"
    xml:
      name: Exchange

#is this really called tick? I would call it candle. Tick (for me) is the smallest unit of change in the marketdata. Like the bidsize changing.
  Tick:
    properties:
      exchange_code:
        type: string
        description: "The code of the exchange/broker"
      symbol:
        type: string
        description: "The symbol of an asset"
        example: "BTC-USD"
      last:
        type: number
        format: float
      high:
        type: number
        format: float
      low:
        type: number
        format: float
      current_volume:
        type: number
        format: float
      ask:
        type: number
        format: float
      bid:
        type: number
        format: float
      timestamp:
        type: string
        format: date-time
        description: "The full date time format ISO 8601 from the exchange/broker"
    xml:
      name: Tick
  
  Position:
    properties:
      symbol:
        type: string
#Symbology is difficult. Exchanges randomly invent new codes for assets. Look at Kraken Bitcoin: XXBT...
#Which symbology do we adopt? Stick to one + mapping needs to be done in the system between user facing calls and backend.
        description: The symbol ID on the exchange of choice.
        example: "A valid symbol ID"
      quantity:
        type: number
        format: float
    xml:
      name: Position

  Symbol:
    properties:
      symbol:
        type: string
        description: The symbol identifier of the exchange of choice
      exchange_code:
        type: string
        description: "The code of the exchange/broker"
    xml:
      name: Symbol

      
securityDefinitions:
  bridge_auth:
    type: oauth2
    authorizationUrl: "http://bridge.guruvest.io/api/oauth"
    flow: implicit
    scopes:
      "write:orders": send orders to your account
      "read:orders": read your orders
  api_key:
    name: api_key
    type: apiKey
    description: API key parameter
    in: header

paths:
  /info:
    get:
      tags: ["System Info"]
      summary: "Get system information"
      operationId: "SystemInfo"
      responses:
        "200":
          description: "No error"
          schema:
            $ref: "#/definitions/SystemInfo"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  "/accounts":
    get:
      tags: ["Account Data"]
      summary: Return the list of all the linked accounts
      description: ""
      operationId: getLinkedAccounts
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/LinkedAccount"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/accounts/orders":
    get:
      tags: ["Account Data"]
      summary: Return the list of orders across all the linked accounts
      description: Return the list of orders across linked accounts. If the account identifier is passed, selects only the orders on the specified account
      operationId: getOrdersByAccount
      parameters:
        - $ref: '#/parameters/accountIdParam'
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/statusParam'
      responses:
        "200":
          description: successful operation
          schema:
#arrays of orders in which direction? Time asc or desc?
            type: array
            items:
              $ref: "#/definitions/Order"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
  
  "/accounts/portfolios":
    get:
      tags: ["Account Data"]
      summary: Return the list of portfolios across all the linked accounts
      description: Return the list of portfolios across linked accounts. If the account identifier is passed, selects only the portfolios on the specified account
      operationId: getPortfoliosByAccount
      parameters:
        - $ref: '#/parameters/accountIdParam'
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Position"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/accounts/trades":
    get:
      tags: ["Account Data"]
      summary: Return the list of trades across all the linked accounts
      description: Return the history of trades across linked accounts. If account identifier is passed, selects only the trades on the specific account
      operationId: getTradesByAccount
      parameters:
#arrays of orders in which direction? Time asc or desc?
        - $ref: '#/parameters/accountIdParam'
        - $ref: '#/parameters/statusParam'
        - $ref: '#/parameters/limitParam'
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Trade"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
            
  "/market/exchanges":
    get:
      tags: ["Market Access"]
      summary: Return the list of exchanges supported
      description: ""
      operationId: getExchanges
      responses:
        "200":
          description: successful operation
          schema:
              type: array
              items:
                $ref: "#/definitions/Exchange"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
  
  "/market/symbols":
    get:
      tags: ["Market Access"]
      summary: Return the list of symbols for the given trading venue.
      description: "Return the list of symbols for the specified trading venue. If no trading venue (exchange_id) is specified, the default one will be used"
      operationId: getSymbols
      parameters:
        - $ref: '#/parameters/exchangeIdParam'
      responses:
        "200":
          description: successful operation
          schema:
              type: array
              items:
                $ref: "#/definitions/Symbol"
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/market/tickers":
    get:
      tags: ["Market Access"]
      summary: "Returns last, high (24h), low (24h), ask, bid for specified symbol"
      description: "Return the last, high (24h), low (24h), ask, bid for specified symbol. If no trading venue (exchange_id) is specified, the default one will be used"
      operationId: getTicker
      parameters:
        - $ref: '#/parameters/symbolParam'
        - $ref: '#/parameters/exchangeIdParam'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Tick"
        "400":
          description: Invalid Symbol supplied
        "404":
          description: Symbol not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"

  "/market/orders":
    post:
      tags: ["Market Access"]
      summary: Add a new order to the order book
      description: ""
      operationId: addOrder
      parameters:
        - name: order
          in: body
          description: Order object that needs to be added to the order book
          required: false
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: Order inserted successfully
        "400":
          description: Invalid request
        "422":
          description: Validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
  
  "/market/orders/{order_id}":
    get:
      tags: ["Market Access"]
      summary: Find an order by ID
      description: ""
      operationId: getOrderById
      parameters:
        - $ref: '#/parameters/orderIdParam'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid request
        "404":
          description: Order not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags: ["Market Access"]
      summary: Update an existing Order
      description: ""
      operationId: updateOrder
      parameters:
        - $ref: '#/parameters/orderIdParam'
        - name: order
          in: body
          description: Order object that needs to be added to the order book
          required: false
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: Order updated successfully
        "400":
          description: Invalid request
        "403":
          description: Order already filled, can not be canceled or modified
        "404":
          description: Order not found
        "422":
          description: Validation exception
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - bridge_auth:
            - "write:orders"
            - "read:orders"
    delete:
      tags: ["Market Access"]
      summary: Cancel the order by ID
      operationId: cancelOrder
      parameters:
        - $ref: '#/parameters/orderIdParam'
      responses:
        "204":
          description: Order deleted successfully
        "400":
          description: Invalid request
        "403":
          description: Order already filled, can not be canceled or modified
        "404":
          description: Order not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
