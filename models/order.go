// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
// swagger:model Order
type Order struct {

	// The full date time format ISO 8601 when the order was closed
	ClosedAt strfmt.DateTime `json:"closed_at,omitempty"`

	// filled quantity
	FilledQuantity float32 `json:"filled_quantity,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// The full date time format ISO 8601 when the order was created
	OpenedAt strfmt.DateTime `json:"opened_at,omitempty"`

	// quantity
	Quantity float32 `json:"quantity,omitempty"`

	// rate
	Rate float32 `json:"rate,omitempty"`

	// side
	Side string `json:"side,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// The identifier of the strategy to whom the order belongs to
	StrategyID string `json:"strategy_id,omitempty"`

	// Symbol ID
	Symbol string `json:"symbol,omitempty"`

	// [optional] GTC, GTT, IOC, or FOK (default is GTC)
	TimeInForce string `json:"time_in_force,omitempty"`

	// Order Type
	Type string `json:"type,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSide(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeInForce(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderTypeSidePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["buy","sell"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeSidePropEnum = append(orderTypeSidePropEnum, v)
	}
}

const (
	// OrderSideBuy captures enum value "buy"
	OrderSideBuy string = "buy"
	// OrderSideSell captures enum value "sell"
	OrderSideSell string = "sell"
)

// prop value enum
func (m *Order) validateSideEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderTypeSidePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateSide(formats strfmt.Registry) error {

	if swag.IsZero(m.Side) { // not required
		return nil
	}

	// value enum
	if err := m.validateSideEnum("side", "body", m.Side); err != nil {
		return err
	}

	return nil
}

var orderTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["open","pending","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeStatusPropEnum = append(orderTypeStatusPropEnum, v)
	}
}

const (
	// OrderStatusOpen captures enum value "open"
	OrderStatusOpen string = "open"
	// OrderStatusPending captures enum value "pending"
	OrderStatusPending string = "pending"
	// OrderStatusClosed captures enum value "closed"
	OrderStatusClosed string = "closed"
)

// prop value enum
func (m *Order) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var orderTypeTimeInForcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GTC","GTT","IOC","FOK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeTimeInForcePropEnum = append(orderTypeTimeInForcePropEnum, v)
	}
}

const (
	// OrderTimeInForceGTC captures enum value "GTC"
	OrderTimeInForceGTC string = "GTC"
	// OrderTimeInForceGTT captures enum value "GTT"
	OrderTimeInForceGTT string = "GTT"
	// OrderTimeInForceIOC captures enum value "IOC"
	OrderTimeInForceIOC string = "IOC"
	// OrderTimeInForceFOK captures enum value "FOK"
	OrderTimeInForceFOK string = "FOK"
)

// prop value enum
func (m *Order) validateTimeInForceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderTypeTimeInForcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateTimeInForce(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeInForce) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeInForceEnum("time_in_force", "body", m.TimeInForce); err != nil {
		return err
	}

	return nil
}

var orderTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["limit","market","stop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeTypePropEnum = append(orderTypeTypePropEnum, v)
	}
}

const (
	// OrderTypeLimit captures enum value "limit"
	OrderTypeLimit string = "limit"
	// OrderTypeMarket captures enum value "market"
	OrderTypeMarket string = "market"
	// OrderTypeStop captures enum value "stop"
	OrderTypeStop string = "stop"
)

// prop value enum
func (m *Order) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
