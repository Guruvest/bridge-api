// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trade trade
// swagger:model Trade
type Trade struct {

	// The fee applied to the trade
	Fee float32 `json:"fee,omitempty"`

	// The full date time format ISO 8601 when the trade was filled
	FilledAt strfmt.DateTime `json:"filled_at,omitempty"`

	// filled quantity
	FilledQuantity float32 `json:"filled_quantity,omitempty"`

	// filled rate
	FilledRate float32 `json:"filled_rate,omitempty"`

	// Whether the trade was partially filled or not
	FilledType string `json:"filled_type,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// notional traded
	NotionalTraded float32 `json:"notional_traded,omitempty"`

	// The link to the order id
	OrderID string `json:"order_id,omitempty"`

	// quantity
	Quantity float32 `json:"quantity,omitempty"`

	// rate
	Rate float32 `json:"rate,omitempty"`

	// side
	Side string `json:"side,omitempty"`

	// Symbol ID
	Symbol string `json:"symbol,omitempty"`
}

// Validate validates this trade
func (m *Trade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilledType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSide(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tradeTypeFilledTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fill","partial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tradeTypeFilledTypePropEnum = append(tradeTypeFilledTypePropEnum, v)
	}
}

const (
	// TradeFilledTypeFill captures enum value "fill"
	TradeFilledTypeFill string = "fill"
	// TradeFilledTypePartial captures enum value "partial"
	TradeFilledTypePartial string = "partial"
)

// prop value enum
func (m *Trade) validateFilledTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tradeTypeFilledTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Trade) validateFilledType(formats strfmt.Registry) error {

	if swag.IsZero(m.FilledType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFilledTypeEnum("filled_type", "body", m.FilledType); err != nil {
		return err
	}

	return nil
}

var tradeTypeSidePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["buy","sell"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tradeTypeSidePropEnum = append(tradeTypeSidePropEnum, v)
	}
}

const (
	// TradeSideBuy captures enum value "buy"
	TradeSideBuy string = "buy"
	// TradeSideSell captures enum value "sell"
	TradeSideSell string = "sell"
)

// prop value enum
func (m *Trade) validateSideEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tradeTypeSidePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Trade) validateSide(formats strfmt.Registry) error {

	if swag.IsZero(m.Side) { // not required
		return nil
	}

	// value enum
	if err := m.validateSideEnum("side", "body", m.Side); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trade) UnmarshalBinary(b []byte) error {
	var res Trade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
