// Code generated by go-swagger; DO NOT EDIT.

package account_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTradesByAccountHandlerFunc turns a function with the right signature into a get trades by account handler
type GetTradesByAccountHandlerFunc func(GetTradesByAccountParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTradesByAccountHandlerFunc) Handle(params GetTradesByAccountParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetTradesByAccountHandler interface for that can handle valid get trades by account params
type GetTradesByAccountHandler interface {
	Handle(GetTradesByAccountParams, interface{}) middleware.Responder
}

// NewGetTradesByAccount creates a new http.Handler for the get trades by account operation
func NewGetTradesByAccount(ctx *middleware.Context, handler GetTradesByAccountHandler) *GetTradesByAccount {
	return &GetTradesByAccount{Context: ctx, Handler: handler}
}

/*GetTradesByAccount swagger:route GET /accounts/trades Account Data getTradesByAccount

Return the list of trades across all the linked accounts

Return the history of trades across linked accounts. If account identifier is passed, selects only the trades on the specific account

*/
type GetTradesByAccount struct {
	Context *middleware.Context
	Handler GetTradesByAccountHandler
}

func (o *GetTradesByAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTradesByAccountParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
