// Code generated by go-swagger; DO NOT EDIT.

package account_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOrdersByAccountHandlerFunc turns a function with the right signature into a get orders by account handler
type GetOrdersByAccountHandlerFunc func(GetOrdersByAccountParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOrdersByAccountHandlerFunc) Handle(params GetOrdersByAccountParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetOrdersByAccountHandler interface for that can handle valid get orders by account params
type GetOrdersByAccountHandler interface {
	Handle(GetOrdersByAccountParams, interface{}) middleware.Responder
}

// NewGetOrdersByAccount creates a new http.Handler for the get orders by account operation
func NewGetOrdersByAccount(ctx *middleware.Context, handler GetOrdersByAccountHandler) *GetOrdersByAccount {
	return &GetOrdersByAccount{Context: ctx, Handler: handler}
}

/*GetOrdersByAccount swagger:route GET /accounts/orders Account Data getOrdersByAccount

Return the list of orders across all the linked accounts

Return the list of orders across linked accounts. If the account identifier is passed, selects only the orders on the specified account

*/
type GetOrdersByAccount struct {
	Context *middleware.Context
	Handler GetOrdersByAccountHandler
}

func (o *GetOrdersByAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOrdersByAccountParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
