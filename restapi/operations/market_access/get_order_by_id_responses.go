// Code generated by go-swagger; DO NOT EDIT.

package market_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Guruvest/bridge-api/models"
)

// GetOrderByIDOKCode is the HTTP code returned for type GetOrderByIDOK
const GetOrderByIDOKCode int = 200

/*GetOrderByIDOK successful operation

swagger:response getOrderByIdOK
*/
type GetOrderByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Order `json:"body,omitempty"`
}

// NewGetOrderByIDOK creates GetOrderByIDOK with default headers values
func NewGetOrderByIDOK() *GetOrderByIDOK {
	return &GetOrderByIDOK{}
}

// WithPayload adds the payload to the get order by Id o k response
func (o *GetOrderByIDOK) WithPayload(payload *models.Order) *GetOrderByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order by Id o k response
func (o *GetOrderByIDOK) SetPayload(payload *models.Order) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOrderByIDBadRequestCode is the HTTP code returned for type GetOrderByIDBadRequest
const GetOrderByIDBadRequestCode int = 400

/*GetOrderByIDBadRequest Invalid request

swagger:response getOrderByIdBadRequest
*/
type GetOrderByIDBadRequest struct {
}

// NewGetOrderByIDBadRequest creates GetOrderByIDBadRequest with default headers values
func NewGetOrderByIDBadRequest() *GetOrderByIDBadRequest {
	return &GetOrderByIDBadRequest{}
}

// WriteResponse to the client
func (o *GetOrderByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetOrderByIDNotFoundCode is the HTTP code returned for type GetOrderByIDNotFound
const GetOrderByIDNotFoundCode int = 404

/*GetOrderByIDNotFound Order not found

swagger:response getOrderByIdNotFound
*/
type GetOrderByIDNotFound struct {
}

// NewGetOrderByIDNotFound creates GetOrderByIDNotFound with default headers values
func NewGetOrderByIDNotFound() *GetOrderByIDNotFound {
	return &GetOrderByIDNotFound{}
}

// WriteResponse to the client
func (o *GetOrderByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetOrderByIDDefault unexpected error

swagger:response getOrderByIdDefault
*/
type GetOrderByIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetOrderByIDDefault creates GetOrderByIDDefault with default headers values
func NewGetOrderByIDDefault(code int) *GetOrderByIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetOrderByIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get order by Id default response
func (o *GetOrderByIDDefault) WithStatusCode(code int) *GetOrderByIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get order by Id default response
func (o *GetOrderByIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get order by Id default response
func (o *GetOrderByIDDefault) WithPayload(payload *models.ErrorResponse) *GetOrderByIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get order by Id default response
func (o *GetOrderByIDDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOrderByIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
