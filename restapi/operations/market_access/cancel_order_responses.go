// Code generated by go-swagger; DO NOT EDIT.

package market_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/alien45/bridge-api/models"
)

// CancelOrderNoContentCode is the HTTP code returned for type CancelOrderNoContent
const CancelOrderNoContentCode int = 204

/*CancelOrderNoContent Order deleted successfully

swagger:response cancelOrderNoContent
*/
type CancelOrderNoContent struct {
}

// NewCancelOrderNoContent creates CancelOrderNoContent with default headers values
func NewCancelOrderNoContent() *CancelOrderNoContent {
	return &CancelOrderNoContent{}
}

// WriteResponse to the client
func (o *CancelOrderNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// CancelOrderBadRequestCode is the HTTP code returned for type CancelOrderBadRequest
const CancelOrderBadRequestCode int = 400

/*CancelOrderBadRequest Invalid request

swagger:response cancelOrderBadRequest
*/
type CancelOrderBadRequest struct {
}

// NewCancelOrderBadRequest creates CancelOrderBadRequest with default headers values
func NewCancelOrderBadRequest() *CancelOrderBadRequest {
	return &CancelOrderBadRequest{}
}

// WriteResponse to the client
func (o *CancelOrderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// CancelOrderForbiddenCode is the HTTP code returned for type CancelOrderForbidden
const CancelOrderForbiddenCode int = 403

/*CancelOrderForbidden Order already filled, can not be canceled or modified

swagger:response cancelOrderForbidden
*/
type CancelOrderForbidden struct {
}

// NewCancelOrderForbidden creates CancelOrderForbidden with default headers values
func NewCancelOrderForbidden() *CancelOrderForbidden {
	return &CancelOrderForbidden{}
}

// WriteResponse to the client
func (o *CancelOrderForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// CancelOrderNotFoundCode is the HTTP code returned for type CancelOrderNotFound
const CancelOrderNotFoundCode int = 404

/*CancelOrderNotFound Order not found

swagger:response cancelOrderNotFound
*/
type CancelOrderNotFound struct {
}

// NewCancelOrderNotFound creates CancelOrderNotFound with default headers values
func NewCancelOrderNotFound() *CancelOrderNotFound {
	return &CancelOrderNotFound{}
}

// WriteResponse to the client
func (o *CancelOrderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*CancelOrderDefault unexpected error

swagger:response cancelOrderDefault
*/
type CancelOrderDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCancelOrderDefault creates CancelOrderDefault with default headers values
func NewCancelOrderDefault(code int) *CancelOrderDefault {
	if code <= 0 {
		code = 500
	}

	return &CancelOrderDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the cancel order default response
func (o *CancelOrderDefault) WithStatusCode(code int) *CancelOrderDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the cancel order default response
func (o *CancelOrderDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the cancel order default response
func (o *CancelOrderDefault) WithPayload(payload *models.ErrorResponse) *CancelOrderDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cancel order default response
func (o *CancelOrderDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CancelOrderDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
