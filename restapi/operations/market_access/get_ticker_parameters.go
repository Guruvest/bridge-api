// Code generated by go-swagger; DO NOT EDIT.

package market_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTickerParams creates a new GetTickerParams object
// with the default values initialized.
func NewGetTickerParams() GetTickerParams {
	var ()
	return GetTickerParams{}
}

// GetTickerParams contains all the bound params for the get ticker operation
// typically these are obtained from a http.Request
//
// swagger:parameters getTicker
type GetTickerParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The trading venue identifier. If not specified, user's default is selected
	  In: query
	*/
	ExchangeID *int32
	/*The symbol identifier
	  Required: true
	  In: query
	*/
	Symbol string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetTickerParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qExchangeID, qhkExchangeID, _ := qs.GetOK("exchange_id")
	if err := o.bindExchangeID(qExchangeID, qhkExchangeID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSymbol, qhkSymbol, _ := qs.GetOK("symbol")
	if err := o.bindSymbol(qSymbol, qhkSymbol, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTickerParams) bindExchangeID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("exchange_id", "query", "int32", raw)
	}
	o.ExchangeID = &value

	return nil
}

func (o *GetTickerParams) bindSymbol(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("symbol", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("symbol", "query", raw); err != nil {
		return err
	}

	o.Symbol = raw

	return nil
}
